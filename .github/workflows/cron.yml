name: Request Page Build
on:
  schedule:
    - cron: '12 * * * *'
    #- cron: '1 */24 * * *'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.ACTIONS }}
          script: |
            // Get day before
            const d = new Date();
            d.setDate(d.getDate()-3);

            // Commits since day before
            const commits = await github.paginate("GET /repos/{owner}/{repo}/commits",
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                since: d.toISOString()
              },
              (response) => response.data.filter((commit) => {
                  return (commit.commit.message.endsWith(".md") && commit.commit.message.startsWith("Create") && !commit.commit.message.includes("footer"))
                })
            ).then(async (filtered) => {
              // Loop filtered
              let added_footer = 0;
              for (const commit of filtered){

                // Get creation commit and take filename
                const single = await github.repos.getCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: commit.sha
                });
                console.log('single', single.data.files[0].filename);

                // Get updated file content
                const file = await github.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: single.data.files[0].filename
                });
                console.log('file.data.sha', file.data.sha);
                
                // Decode content and check if footer is present
                const content = Buffer.from(file.data.content, 'base64').toString('binary');
                if (!content.includes('{% include footer.md %}')) {
                  const new_content = content + '\n{% include footer.md %}';
                  const encoded_content = Buffer.from(new_content, 'binary').toString('base64');
                  const update = await github.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: file.data.path,
                    message: 'Append footer',
                    content: encoded_content,
                    sha: file.data.sha,
                    committer: {
                      name: 'trasparente',
                      email: 'stradatrasparente@gmail.com'
                    },
                    author: {
                      name: 'trasparente',
                      email: 'stradatrasparente@gmail.com'
                    }
                  });
                  console.log('update content', update.data);
                  added_footer++;
                }
              }

              if (added_footer.length > 0) { return; }

              // Trigger Pages rebuild
              const build = await github.repos.requestPagesBuild({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              return build.status;

            });
